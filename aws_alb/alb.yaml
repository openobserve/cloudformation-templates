AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation stack for creating an S3 bucket and Lambda function to process ALB logs.

Parameters:
  S3BucketName:
    Type: String
    Description: Name of the S3 bucket for ALB logs.
  AWSAccountId:
    Type: String
    Description: AWS account ID for access logs.
  ELBAccountId:
    Type: String
    Description: This is for ELB Account and based on the region, you can refer to https://docs.aws.amazon.com/elasticloadbalancing/latest/application/enable-access-logging.html
  AccessLogsPrefix:
    Type: String
    Description: Prefix for access logs folder.
  ConnectionLogsPrefix:
    Type: String
    Description: Prefix for connection logs folder.
  OpenObserveEndpoint:
    Type: String
    Description: OpenObserve HTTP endpoint URL.
  BasicAuthUsername:
    Type: String
    Description: Username for basic authentication.
  BasicAuthPassword:
    Type: String
    Description: Password for basic authentication.

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt LogProcessorLambda.Arn
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldLogs
            Status: Enabled
            ExpirationInDays: 30
  
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3BucketName
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: "arn:aws:iam::${ELBAccountId}:root"
            Action: "s3:PutObject"
            Resource:
              - !Sub "arn:aws:s3:::${S3BucketName}/${AccessLogsPrefix}/AWSLogs/${AWSAccountId}/*"
              - !Sub "arn:aws:s3:::${S3BucketName}/${ConnectionLogsPrefix}/AWSLogs/${AWSAccountId}/*"
              - !Sub "arn:aws:s3:::${S3BucketName}/*"
          - Sid: DenyHTTPAccess
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !Sub "arn:aws:s3:::${S3BucketName}"
              - !Sub "arn:aws:s3:::${S3BucketName}/*"
            Condition:
              Bool:
                aws:SecureTransport: "false"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "LogProcessorLambdaRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${S3BucketName}"
                  - !Sub "arn:aws:s3:::${S3BucketName}/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  LogProcessorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "LogProcessorLambda-${AWS::StackName}"
      Handler: index.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      Environment:
        Variables:
          OPENOBSERVE_ENDPOINT: !Ref OpenObserveEndpoint
          BASIC_AUTH_USERNAME: !Ref BasicAuthUsername
          BASIC_AUTH_PASSWORD: !Ref BasicAuthPassword
      Code:
        ZipFile: |
          import boto3
          import gzip
          import json
          import os
          import http.client
          from base64 import b64encode
          from urllib.parse import unquote, urlparse
          
          s3_client = boto3.client('s3')
          openobserve_endpoint = os.getenv('OPENOBSERVE_ENDPOINT')
          basic_auth_username = os.getenv('BASIC_AUTH_USERNAME')
          basic_auth_password = os.getenv('BASIC_AUTH_PASSWORD')
          
          def lambda_handler(event, context):
              for record in event['Records']:
                  s3_bucket = record['s3']['bucket']['name']
                  s3_key = unquote(record['s3']['object']['key'])
                  log_events = read_logs_from_s3(s3_bucket, s3_key)
                  if log_events:
                      push_logs_to_openobserve(log_events)
          
          def read_logs_from_s3(bucket, key):
              response = s3_client.get_object(Bucket=bucket, Key=key)
              with gzip.GzipFile(fileobj=response['Body']) as gz:
                  return gz.read().decode('utf-8').splitlines()
          
          def push_logs_to_openobserve(log_events):
              parsed_url = urlparse(openobserve_endpoint)
              auth_header = b64encode(f"{basic_auth_username}:{basic_auth_password}".encode()).decode()
              headers = {'Content-Type': 'application/json', 'Authorization': f'Basic {auth_header}'}
              for log in log_events:
                  conn = http.client.HTTPSConnection(parsed_url.netloc)
                  body = json.dumps({"log": log})
                  conn.request("POST", parsed_url.path, body=body, headers=headers)
                  response = conn.getresponse()
                  print(response.status, response.reason)
                  conn.close()


  LambdaPermissionForS3:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LogProcessorLambda.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub "arn:aws:s3:::${S3BucketName}"

Outputs:
  S3Bucket:
    Description: Created S3 bucket for ALB logs.
    Value: !Ref S3BucketName
  LambdaFunction:
    Description: ARN of the log processing Lambda function.
    Value: !GetAtt LogProcessorLambda.Arn
